---
import { Icon } from "astro-icon/components";
---

<div class="navigation text-neutral-950">
  <ul>
    <li class="list active">
      <a href="#">
        <span class="icon">
          <Icon name="IcRoundHome" />
        </span>
        <span class="text">Home</span>
      </a>
    </li>
    <li class="list">
      <a href="#">
        <span class="icon">
          <Icon name="IcBaselinePerson" />
        </span>
        <span class="text">About</span>
      </a>
    </li>
    <li class="list">
      <a href="#">
        <span class="icon">
          <Icon name="IcBaselineCardTravel" />
        </span>
        <span class="text">Portfolio</span>
      </a>
    </li>
    <li class="list">
      <a href="#">
        <span class="icon">
          <Icon name="IcBaselineContactPage" />
        </span>
        <span class="text">Contact</span>
      </a>
    </li>
    <li class="list">
      <a href="#">
        <span class="icon">
          <Icon name="IcBaselineWechat" />
        </span>
        <span class="text">Blogs</span>
      </a>
    </li>
    <div class="indicator"></div>
  </ul>
</div>

<script>
  const list = document.querySelectorAll<HTMLElement>(".list");
  const indicator = document.querySelector<HTMLElement>(".indicator");

  function adjustIndicator() {
    const activeItem = document.querySelector<HTMLElement>(".list.active");
    const icon = activeItem?.querySelector<HTMLElement>(".icon");
    const iconRect = icon?.getBoundingClientRect();
    const indicatorRect = indicator?.getBoundingClientRect();
    // get width of the indicator
    const indicatorWidth = indicatorRect?.width ?? 0;
    const iconWidth = iconRect?.width ?? 0;
    const xPosition =
      (iconRect?.left ?? 0) - indicatorWidth / 2 + iconWidth / 2;
    if (indicator) indicator.style.transform = `translateX(${xPosition}px)`;
  }

  function activeLink(this: HTMLElement) {
    list.forEach((item) => item.classList.remove("active"));
    this.classList.add("active");
    const icon = this.querySelector<HTMLElement>(".icon");
    const iconRect = icon?.getBoundingClientRect();
    const indicatorRect = indicator?.getBoundingClientRect();
    // get width of the indicator
    const indicatorWidth = indicatorRect?.width ?? 0;
    const iconWidth = iconRect?.width ?? 0;
    const xPosition =
      (iconRect?.left ?? 0) - indicatorWidth / 2 + iconWidth / 2;
    if (indicator) indicator.style.transform = `translateX(${xPosition}px)`;
  }

  list.forEach((item) => item.addEventListener("click", activeLink));

  window.addEventListener("DOMContentLoaded", () => {
    const activeItem = document.querySelector<HTMLElement>(".list.active");
    const icon = activeItem?.querySelector<HTMLElement>(".icon");
    const iconRect = icon?.getBoundingClientRect();
    const indicatorRect = indicator?.getBoundingClientRect();
    // get width of the indicator
    const indicatorWidth = indicatorRect?.width ?? 0;
    const iconWidth = iconRect?.width ?? 0;
    const xPosition =
      (iconRect?.left ?? 0) - indicatorWidth / 2 + iconWidth / 2;
    if (indicator) indicator.style.transform = `translateX(${xPosition}px)`;
  });

  // add when there is resize indicator moves with icon
  window.addEventListener("resize", () => {
    const activeItem = document.querySelector<HTMLElement>(".list.active");
    const icon = activeItem?.querySelector<HTMLElement>(".icon");
    const iconRect = icon?.getBoundingClientRect();
    const indicatorRect = indicator?.getBoundingClientRect();
    // get width of the indicator
    const indicatorWidth = indicatorRect?.width ?? 0;
    const iconWidth = iconRect?.width ?? 0;
    const xPosition =
      (iconRect?.left ?? 0) - indicatorWidth / 2 + iconWidth / 2;
    if (indicator) indicator.style.transform = `translateX(${xPosition}px)`;
  });
</script>

<style>
  .navigation {
    width: 100%;
    height: 70px;
    background-color: #f5f5f5;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 10px;
    position: relative;
  }

  .navigation ul {
    display: flex;
    justify-content: space-around;
    /* align-items: center; */
    width: 90%;
  }

  .navigation ul li {
    position: relative;
    width: 18%;
    height: 70px;
    z-index: 1;
  }
  .navigation ul li a {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    width: 100%;
    text-align: center;
    font-weight: 500;
  }

  .navigation ul li a .icon {
    position: relative;
    display: block;
    line-height: 75px;
    font-size: 2em;
    text-align: center;
    transition: 0.5s;
    margin: 20px 0;
  }

  .navigation ul li.active a .icon {
    transform: translateY(-35px);
  }

  .navigation ul li a .text {
    position: absolute;
    font-weight: 400;
    font-size: 1em;
    letter-spacing: 0.05em;
    transition: 0.5s;
    opacity: 0;
    font-weight: bold;
    transform: translateY(20px);
  }

  .navigation ul li.active a .text {
    opacity: 1;
    transform: translateY(10px);
  }

  .indicator {
    position: absolute;
    top: -50%;
    left: 0px;
    width: 70px;
    height: 70px;
    background-color: #fbbf24;
    border-radius: 50%;
    border: 6px solid rgb(23 23 23);
    transition: 0.5s;
  }

  .indicator::before {
    content: "";
    position: absolute;
    top: 50%;
    left: -22px;
    width: 20px;
    height: 20px;
    background: transparent;
    border-top-right-radius: 20px;
    box-shadow: 1px -10px 0 0 rgb(23 23 23);
  }

  .indicator::after {
    content: "";
    position: absolute;
    top: 50%;
    right: -22px;
    width: 20px;
    height: 20px;
    background: transparent;
    border-top-left-radius: 20px;
    box-shadow: -1px -10px 0 0 rgb(23 23 23);
  }
</style>
